:noprevnext:

===================
Launch BI Connector
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _launch:

Overview
--------

:binary:`~bin.mongosqld` is the |bi-short| program which connects
your MongoDB instance to your BI tool.  :binary:`~bin.mongosqld`
requires a data schema which maps to your MongoDB collections and
databases. You have several options for creating a schema and
launching :binary:`~bin.mongosqld`. This guide will help you choose
the best option for your needs.

Creating a Schema
-----------------

.. note::

   If you choose to deploy |bi-short| as a :ref:`hosted service with
   MongoDB Atlas <deploy-bic-atlas>`, you do not need to create a
   schema.

To create a schema, |bi-short| collects a sample of your data and
infers a structure of tables and columns. By default, the sample size
is 1000 documents, but you can configure that amount to be larger or
smaller. You can also specify that the schema should include all
available data.

You can create a schema in one of two ways:

- Use the :binary:`~bin.mongosqld` built-in sampling to create a schema
  on the fly. For more information, see :ref:`Cached Sampling
  <bi-cached-sampling>`.
- Run the :binary:`~bin.mongodrdl` program to explicitly create a
  schema file for ``mongosqld`` to read upon startup. For more
  information see :ref:`schema-with-drdl-file`.

Schema Creation with ``mongosqld``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongosqld` has the ability to generate its own schema
when it starts and hold the schema in memory.

The following example connects to a local :binary:`~bin.mongod`
instance running on the default port ``27017`` and creates a schema
from the ``books`` collection in the ``test`` database with a sample
size of 5000 documents. ``mongosqld`` holds the schema in memory.

.. class:: copyable-code
.. code-block:: shell

   mongosqld --sampleNamespaces test.books --sampleSize 5000

.. seealso::

   :ref:`mongosqld Sampling Command Line Options <msqld-schema-options>`

   :ref:`mongosqld Usage Examples <mongosqld-usage-examples>`

Schema Creation with ``mongodrdl``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongodrdl` is a standalone program which connects to
your MongoDB instance, samples the available data, and creates a
schema file with the extension ``.drdl``.

The following example connects to a local :binary:`~bin.mongod`
instance running on the default port ``27017`` and creates a schema
file named ``schema.drdl`` from the ``books`` collection in the
``test`` database.

.. class:: copyable-code
.. code-block:: shell

   mongodrdl --db test --collection books -out schema.drdl

To connect to a remote server with :manual:`authentication
</core/authentication/>` enabled, use the following format:

.. class:: copyable-code
.. code-block:: shell

   mongodrdl --host myhost.example.net:27017 \
             --username dbUser \
             --password myPassword \
             --db reports \
             --collection FY2017 \
             --authenticationDatabase admin \
             --out schema.drdl

.. seealso::

   :ref:`mongodrdl Usage Examples <mongodrdl-usage-examples>`

   :ref:`mongodrdl Command Line Options <mongodrdl-command-line-options>`

If you choose to create a schema file with ``mongodrdl``, you can
specify it with the :option:`--schema <mongosqld --schema>` option
when starting :binary:`~bin.mongosqld`.

Launching ``mongosqld``
-----------------------

There are three options for launching and running
:binary:`~bin.mongosqld`. You can:

- Deploy ``mongosqld`` as a :ref:`hosted service with MongoDB Atlas
  <deploy-bic-atlas>`
- Start ``mongosqld`` :ref:`from the command line <start-msqld-cli>`
- Install ``mongosqld`` as a :ref:`system service
  <msqld-as-a-system-service>`

.. _deploy-bic-atlas:

Deploy BI Connector via MongoDB Atlas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/atlas-bi-connector.rst

.. _start-msqld-cli:

``mongosqld`` with Command Line Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. COMMENT Empty tabs below to render tab strip below heading

.. tabs::

   tabs:
     - id: shell
       name: Windows
       content: |

     - id: macos
       name: MacOS
       content: |

     - id: debian
       name: Debian
       content: |

     - id: rhel
       name: RHEL
       content: |

You can use command line options to specify collections and databases
to sample, user credentials, and other configuration options. For a
complete list of command line options, see
:ref:`mongosqld-command-line-options`.

To start ``mongosqld`` from the command line, run the ``mongosqld``
executable in the |bi-short| program directory and use whatever command
line options you need.

.. tabs::

   hidden: true

   tabs:
     - id: shell
       name: Windows
       content: |
         The following example uses the :option:`--sampleNamespaces <mongosqld
         --sampleNamespaces>` option to specify the ``books`` collection in the
         ``test`` database.

         .. cssclass:: copyable-code
         .. code-block:: ps1

            "C:\Program Files\MongoDB\Connector for BI\2.4\bin\mongosqld.exe" --sampleNamespaces test.books

     - id: macos
       name: MacOS
       content: |
         The following example uses the :option:`--sampleNamespaces <mongosqld
         --sampleNamespaces>` option to specify the ``books`` collection in the
         ``test`` database.

         .. cssclass:: copyable-code
         .. code-block:: ps1

            mongosqld --sampleNamespaces test.books

     - id: debian
       name: Debian
       content: |
         The following example uses the :option:`--sampleNamespaces <mongosqld
         --sampleNamespaces>` option to specify the ``books`` collection in the
         ``test`` database.

         .. cssclass:: copyable-code
         .. code-block:: ps1

            mongosqld --sampleNamespaces test.books

     - id: rhel
       name: RHEL
       content: |
         The following example uses the :option:`--sampleNamespaces <mongosqld
         --sampleNamespaces>` option to specify the ``books`` collection in the
         ``test`` database.

         .. cssclass:: copyable-code
         .. code-block:: ps1

            mongosqld --sampleNamespaces test.books

.. note::

   :binary:`~bin.mongosqld` defaults to port ``3307``. You can set
   the port number manually by providing the :option:`--addr
   <mongosqld --addr>` option with the host address and port.

``mongosqld`` with a Configuration File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. COMMENT Empty tabs below to render tab strip below heading

.. tabs::

   tabs:
     - id: shell
       name: Windows
       content: |

     - id: macos
       name: MacOS
       content: |

     - id: debian
       name: Debian
       content: |

     - id: rhel
       name: RHEL
       content: |

You can use a :ref:`configuration file <config-format>` to hold all your
``mongosqld`` configuration options. Start ``mongosqld`` with the
:option:`--config <mongosqld --config>` option to specify a
configuration file.

.. tabs::

   hidden: true

   tabs:
     - id: shell
       name: Windows
       content: |
         .. cssclass:: copyable-code
         .. code-block:: ps1

            "C:\Program Files\MongoDB\Connector for BI\2.4\bin\mongosqld.exe" --config <pathToConfigFile>\mongosqld.conf

     - id: macos
       name: MacOS
       content: |
         .. cssclass:: copyable-code
         .. code-block:: ps1

            mongosqld --config <pathToConfigFile>/mongosqld.conf

     - id: debian
       name: Debian
       content: |
         .. cssclass:: copyable-code
         .. code-block:: ps1

            mongosqld --config <pathToConfigFile>/mongosqld.conf

     - id: rhel
       name: RHEL
       content: |
         .. cssclass:: copyable-code
         .. code-block:: ps1

            mongosqld --config <pathToConfigFile>/mongosqld.conf

.. _msqld-as-a-system-service:

``mongosqld`` as a System Service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. COMMENT Empty tabs below to render tab strip below heading

.. tabs::

   tabs:
     - id: shell
       name: Windows
       content: |

     - id: macos
       name: MacOS
       content: |

     - id: debian
       name: Debian
       content: |

     - id: rhel
       name: RHEL
       content: |

|bi-short| requires a configuration file with the
:setting:`systemLog.path` setting specified when running as a
system service. Using your preferred text editor, create a
``mongosqld.conf`` file. To review the configuration file options,
see :ref:`Configuration File <config-format>`. For example:

.. cssclass:: copyable-code
.. code-block:: text

   systemLog:
     path: '/logs/mongosqld.log'
   net:
     bindIp: "127.0.0.1"
     port: 3307

.. tabs::

   hidden: true

   tabs:
     - id: shell
       name: Windows
       content: |

         .. note::

            All the file paths in your configuration file must be
            absolute and wrapped in single quotes. For example:

            .. code-block:: text

               systemLog:
                 path: 'C:\logs\mongosqld.log'

         To install and run ``mongosqld`` as a system service, run the
         following commands:

         .. cssclass:: copyable-code
         .. code-block:: ps1

            "C:\Program Files\MongoDB\Connector for BI\2.4\bin\mongosqld.exe" install --config <pathToConfigFile>\mongosqld.conf
            net start mongosql

         Windows returns ``mongosql service installed`` if your installation
         succeeded.

     - id: macos
       name: MacOS
       content: |

         To install and run ``mongosqld`` as a system service, run the
         following commands:

         .. cssclass:: copyable-code
         .. code-block:: sh

            mongosqld install --config <pathToConfigFile>/mongosqld.conf
            launchctl load -w /Library/LaunchDaemons/mongosql.plist

     - id: debian
       name: Debian
       content: |

         Debian 7.x (Wheezy)
         ~~~~~~~~~~~~~~~~~~~

         .. cssclass:: copyable-code
         .. code-block:: sh

            mongosqld install --config <pathToConfigFile>/mongosqld.conf
            service mongosql start

         To enable the service so it starts automatically at boot time, run
         the following:

         .. cssclass:: copyable-code
         .. code-block:: sh

            chkconfig mongosql on

         Debian 8.1 (Jessie) and Ubuntu 14.04 (Trusty)
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

         .. cssclass:: copyable-code
         .. code-block:: sh

            mongosqld install --config <pathToConfigFile>/mongosqld.conf
            systemctl start mongosql.service

         To enable the service so it starts automatically at boot time, run
         the following:

         .. cssclass:: copyable-code
         .. code-block:: sh

            systemctl enable mongosql.service

     - id: rhel
       name: RHEL
       content: |

         RHEL 6.x / CentOS 6.x and SUSE 11
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

         .. cssclass:: copyable-code
         .. code-block:: sh

            mongosqld install --config <pathToConfigFile>/mongosqld.conf
            service mongosql start

         To enable the service so it starts automatically at boot time, run
         the following:

         .. cssclass:: copyable-code
         .. code-block:: sh

            chkconfig mongosql on

         RHEL 7.x / CentOS 7.x and SUSE 12
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

         .. cssclass:: copyable-code
         .. code-block:: sh

            mongosqld install --config <pathToConfigFile>/mongosqld.conf
            systemctl start mongosql.service

         To enable the service so it starts automatically at boot time, run
         the following:

         .. cssclass:: copyable-code
         .. code-block:: sh

            systemctl enable mongosql.service

Next Steps
----------

Once |bi-short| is up and running, you are ready to begin using it
with your preferred BI tool. See :doc:`/client-applications` for a
selected list of connection tutorials.
